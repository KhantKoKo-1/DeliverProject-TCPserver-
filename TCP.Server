import socket
import threading
from Mongon_DB import mongodatabase


class TCPserver():

    def __init__(self, ip, port):
        self.server_ip = ip
        self.server_port = port

    def Server(self):
        # creating server
        server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server.bind((self.server_ip, self.server_port))
        # start listening from server
        server.listen(5)
        print(f'Server is listening on {self.server_ip} : {self.server_port}')

        while True:
            # connection accept
            client, address = server.accept()
            print(f'Accepted connection from {address}:')

            # transmit data and recive
            client_handler = threading.Thread(target=self.handle_client, args=(client,))
            client_handler.start()

    def handle_client(self, client_socket):
        listl = []

        with client_socket as sock:
            while True:
                print('add')
                receive_data = sock.recv(1024)

                data = receive_data.decode("utf-8")

                print("receivedata", data)

                if data == '1':
                    obj = mongodatabase()
                    tosend = obj.showmenu()

                    sock.send(tosend.encode())
                    while True:

                        revData = sock.recv(1024).decode('utf-8')

                        listl.append(revData)
                        print('up', revData)
                        print('list', listl)

                        if revData == '1':
                            send_order = obj.order()
                            sock.send(send_order.encode())

                            revFromClient = sock.recv(1024).decode('utf-8')
                            print('re1', revFromClient)
                            split_item = revFromClient.split("$")
                            return_data = obj.toCheckMenu(split_item)
                            sendClient = obj.showmenu_test(listl[0])

                            if not return_data:
                                add_word = 'Your Order is Not Found!Try again\n'

                                print(listl[0])
                                add_word += sendClient
                                sock.send(add_word.encode())
                                print(revFromClient)

                            else:
                                return_list = obj.add_cert(revFromClient)
                                print(return_list)
                                sock.send(sendClient.encode())



                        elif revData == '2':
                            sendForRemove = obj.removeCert()
                            sock.send(sendForRemove.encode())

                            revData_cert = sock.recv(1024).decode('utf-8')
                            print('revDatacert-', revData_cert)
                            return_d = obj.remove(revData_cert)
                            if return_d:
                                add_words = 'Remove order success\n'
                                add_words += sendClient
                                sock.send(add_words.encode())
                            else:
                                add = 'order Not Found\n'
                                add += sendClient
                                sock.send(add.encode())



                        elif revData == '3':
                            toSend = obj.order_print()
                            sock.send(toSend.encode())
                            rev_ = sock.recv(1024).decode('utf-8')
                            if rev_ == '1':
                                return_h = obj.order_comfirm()
                                print(return_h)
                                if return_h == 'Total amount  = 0$Are you sure confirm:Yes or No':
                                    add_w = "You Haven't order yet!\n"
                                    add_w += sendClient
                                    sock.send(add_w.encode())
                                else:
                                    sock.send(return_h.encode())
                                    revinfo = sock.recv(1024).decode('utf-8')
                                    words = revinfo.title()
                                    print(words)
                                    if words == 'Yes':
                                        ss = obj.ForYes()
                                        sock.send(ss.encode())
                                    else:
                                        pass
                            elif rev_ == '2':
                                pass
                            else:
                                pass




                        else:
                            returnForCheck = obj.checkMenu(revData)
                            if returnForCheck:

                                sendClient = obj.showmenu_test(revData)
                                sock.send(sendClient.encode())
                            else:
                                _add = ' Menu is Not Found!!!\n'
                                _add += tosend
                                sock.send(_add.encode())


                elif data == '2':

                    obj = mongodatabase()
                    tosend_1 = obj.sign_up_account()
                    sock.send(tosend_1.encode())

                    r_data = sock.recv(1024).decode('utf-8')
                    print('receiveData-2:', r_data)
                    split_data = r_data.split("$")
                    print(split_data)
                    key = split_data[1]
                    send = obj.for_send_option()

                    try:
                        int_data = int(key)
                        print(int_data)
                        return_Data = obj.ph_count_checking(int_data)

                        if return_Data:
                            returnFromDB = obj.check_Phnumber(key)
                            if not returnFromDB:  # is false
                                result_pass = obj.check_comfirm_password(split_data)
                                if result_pass:

                                    obj.addData(split_data)
                                    add_str = 'Registation Success$'
                                    add_str += send
                                    print(add_str)
                                    sock.send(add_str.encode())
                                else:
                                    print("Wrong PassWord")


                            else:

                                print("Your PhNumber is already exist")


                        else:
                            print('Wrong Ph_Number')

                    except ValueError:
                        print('Wrong Ph_Number')

                    add_str = 'Something What Wrong Pls Try again$'
                    add_str += send
                    sock.send(add_str.encode())

                elif data == '3':
                    obj = mongodatabase()
                    sendsms = obj.sign_in_account()
                    sock.send(sendsms.encode())
                    rev_data = sock.recv(1024).decode('utf-8')
                    print('receiveData-3 :', rev_data)
                    split_data = rev_data.split("$")
                    print(split_data)

                    dataFromMongo = obj.check_Phnumber(split_data[0])
                    print('receive Ph', dataFromMongo)

                    if not dataFromMongo:
                        pass
                    else:
                        dataFromMongo_1 = obj.checking_password(dataFromMongo, split_data[1])
                        print('receive pass', dataFromMongo_1)
                        if dataFromMongo_1:
                            sendToClient = obj.user_account()
                            sock.send(sendToClient.encode())


                        else:
                            print('false')


if __name__ == "__main__":
    server_ip = 'localhost'
    server_port = 9999

    tcpServer = TCPserver(server_ip, server_port)
    tcpServer.Server()
