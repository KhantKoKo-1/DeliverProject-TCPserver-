from pymongo import MongoClient

list_shop = []
list_cert = []


class mongodatabase:
    try:

        client = MongoClient('localhost', 27017)
        db = client['Delivery_database']  # or db = client.test_database
        collection = db['Menu-collection']  # or collection = db.test_collection
        collection_1 = db['shop-collection']
        collection_2 = db['user-collection']

        print("connection success")



    except Exception as error:
        print(error)

    def __init__(self):
        data = [
            {"_id": 1, "Menu": "Chicken", "Shop Name": ["Teashop", "PanEi"]},
            {"_id": 2, "Menu": "Sea Food", "Shop Name": ["Shwe Lu Lu", "Myat"]},
            {"_id": 3, "Menu": "Korea Food", "Shop Name": ["KPop", "K-Noodle"]},
            {"_id": 4, "Menu": "China Food", "Shop Name": ["Shwe Nay Chi", "PaPa"]},
            {"_id": 5, "Menu": "Asia Food", "Shop Name": ["Pyae phyo", "PanEi"]},

        ]
        data_1 = [
            {"_id": 1, "Shop Name": "Teashop",
             "food": {"sandwich": 2500, "Thai soup": 2200, "Potato Marlar": 2500, "fry chicken": 2200,
                      "Malasamkaw": 5000},
             "drink": {"Tea": 500, "Coffee": 500, "LEMON Juice": 500}},
            {"_id": 2, "Shop Name": "PanEi", "food": {"Bread": 2000, "Cake:": 8000, "Fried Rice(Chicken)": 3000},
             "drink": {"orange juice": 1000, "Tea": 500}},
            {"_id": 3, "Shop Name": "FuDo Barkery", "food": {"Burgar": 2000, "Chocolate Cake": 3500},
             "drink": {"AVOCADO JUICE": 1500, "StawBarry JUICE": 1500}},
            # {"_id": 4, "Shop Name": "Shwe Lu Lu", "food": {"Shan Noodle-1500", "fired rice-2500", "Tongyang soup-2000"},
            #  "drink": {"lemon juice =2000", "Lemon tea =800"}},
            # {"_id": 5, "Shop Name": "Pyae phyo", "food": {'Kimar plata-2500', 'Irak kwe-300'},
            #  "drink": {"Silong Tea-1000", "Coffee-500"}},

        ]

        data_2 = [
            {'_id': 1, 'User_Name': 'Khant Ko Ko', 'Phone': '959123456789', 'Password': 'khant123'},
            {'_id': 2, 'User_Name': 'SiThu', 'Phone': '959532145671', 'Password': 'SiThu123'},
            {'_id': 3, 'User_Name': 'Aung Kaung Sett', 'Phone': '959556677889', 'Password': 'Aung123'},
            {'_id': 4, 'User_Name': 'Tha Zin Naing', 'Phone': '959987654321', 'Password': 'Thazin345'},

        ]
        # try:
        #     # self.collection.insert_many(data)
        #     self.collection_1.insert_many(data_1)
        #     print("insert successful")
        # except Exception as error:
        #     print(error)

    def showmenu(self):

        find = self.collection.find({}, {'Menu': 1, '_id': 0})

        menu_str = '\n'.join(map(str, find))
        t = '$Enter choice Menu : '
        menu_str += t
        return menu_str

    def showmenu_test(self, menu):
        list_menu = []
        find = self.collection.find().distinct('Menu')
        for f_Menu in find:
            if f_Menu == menu:
                menu_shop = {"Menu": menu}
                find_shop = self.collection.find_one(menu_shop)

                find2 = find_shop.get('Shop Name')
                for i in find2:
                    menu_food = {'Shop Name': i}
                    find_1 = self.collection_1.find_one(menu_food)
                    find_3 = find_1.get('food')
                    find_4 = find_1.get('drink')

                    list_menu.append(i)

                    list_menu.append(find_3)
                    list_menu.append(find_4)
                    list_shop.append(i)
        print('listshop', list_shop)
        menu_str = '\n'.join(map(str, list_menu))
        order = "$Press 1:Add To cert\nPress 2:Remove from cert\nPress 3:Back To option\nEnter Choose:"
        menu_str += order
        return menu_str

    def order(self):

        # menu_str = '\n'.join(map(str, list_menu))

        order = "You Can order Now!$item :$Number of item :$Shop Name :"
        # menu_str += order
        return order

    def toCheckMenu(self, split_item):
        # print('check',list_shop)
        # find_shop = self.collection_1.find().distinct('Shop Name')
        for i in list_shop:
            print(i)
            if i == split_item[2]:

                menu_food = {'Shop Name': i}
                find_1 = self.collection_1.find_one(menu_food)
                find_3 = find_1.get('food')
                find_4 = find_1.get('drink')

                for food in find_3:
                    if food == split_item[0]:
                        print('Food', food)
                        list_shop.clear()
                        return food
                for drink in find_4:
                    if drink == split_item[0]:
                        list_shop.clear()

                        print('drink', drink)
                        return drink

        list_shop.clear()
        print(list_shop)

        print('None')
        return False

    def add_cert(self, order):

        list_cert.append(order)
        return list_cert

    def remove(self, Data):
        cert = ['sand$3$tea', 'pain$5$panEi', 'tea$3$TeaPro']

        print('cert', cert)
        print('Data', Data)

    def check_Phnumber(self, receive_data):
        find_ph = self.collection_2.find().distinct('Phone')
        print('find ph', find_ph)
        key = '959'
        add_key = key + receive_data
        print(add_key)
        for data in find_ph:
            if data == add_key:
                return data
            else:
                print("False")
        return False

    def checking_password(self, phFromserver, passFromServer):
        ph = {"Phone": phFromserver}
        find = self.collection_2.find_one(ph)
        pass_1 = find.get('Password')

        if pass_1 == passFromServer:
            print('True')
            return True
        else:
            print('false')
            return False

    def addData(self, add_list_data):

        order = self.client['Delivery_database']['user-collection']
        count = order.count_documents({}) + 1
        print(count)
        var = '959'
        data = var + add_list_data[1]
        add_list_data[1] = data

        add_list_data.insert(0, count)
        list2 = ['_id', 'User_Name', 'Phone', 'Password']
        d1 = zip(list2, add_list_data)
        dic_data = dict(d1)
        print(dic_data)
        self.collection_2.insert_one(dic_data)
        print("insert successful")

    def ph_count_checking(self, int_Data):

        count = len(str(int_Data))
        if count == 9:
            return True
        else:
            return False

    def check_comfirm_password(self, list_data):

        if list_data[-2] == list_data[-1]:
            return True
        else:
            return False

    def sign_up_account(self):

        user = "This is Register State$Enter UserName:$Enter Ph_Number:$Enter Password:$Enter Confirm password:"

        return user

    def sign_in_account(self):

        client = "This is LoginState$Enter Ph_Number$Enter Password:"
        return client

    def user_account(self):
        account = "Login Success$Press 1:Menu\nPress 2:Back To option:\nPress 3 setting"
        return account

    def for_send_option(self):
        option = "press 1 : show menu\npress 2 : create account\npress 3 : Sign in account\nEnter option : "
        return option

    def removeCert(self):
        remove_option = "----$Enter Remove item:$Enter shopName:"
        return remove_option


if __name__ == "__main__":
    obj = mongodatabase()
    # obj.showmenu_test('Chicken')
    # data =['Tea','3','PanEi']
    # obj.toCheckMenu(data)
    obj.remove('tea$TeaPro')
