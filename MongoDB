from pymongo import MongoClient
import time

list_shop = []
list_cert = []
list_signin = ['hello']


class mongodatabase:
    try:

        client = MongoClient('localhost', 27017)
        db = client['Delivery_database']  # or db = client.test_database
        collection = db['Menu-collection']  # or collection = db.test_collection
        collection_1 = db['shop-collection']
        collection_2 = db['user-collection']
        collection_3 = db['Order-History']

        print("connection success")



    except Exception as error:
        print(error)

    def __init__(self):
        data = [
            {"_id": 1, "Menu": "Chicken", "Shop Name": ["Teashop", "PanEi"]},
            {"_id": 2, "Menu": "Sea Food", "Shop Name": ["Shwe Lu Lu", "Myat"]},
            {"_id": 3, "Menu": "Korea Food", "Shop Name": ["KPop", "K-Noodle"]},
            {"_id": 4, "Menu": "China Food", "Shop Name": ["Shwe Nay Chi", "PaPa"]},
            {"_id": 5, "Menu": "Asia Food", "Shop Name": ["Pyae phyo", "PanEi"]},

        ]
        data_1 = [
            {"_id": 1, "Shop Name": "Teashop",
             "food": {"sandwich": 2500, "Thai soup": 2200, "Potato Marlar": 2500, "fry chicken": 2200,
                      "Malasamkaw": 5000},
             "drink": {"Tea": 500, "Coffee": 500, "LEMON Juice": 500}},
            {"_id": 2, "Shop Name": "PanEi", "food": {"Bread": 2000, "Cake:": 8000, "Fried Rice(Chicken)": 3000},
             "drink": {"orange juice": 1000, "Tea": 500}},
            {"_id": 3, "Shop Name": "FuDo Barkery", "food": {"Burgar": 2000, "Chocolate Cake": 3500},
             "drink": {"AVOCADO JUICE": 1500, "StawBarry JUICE": 1500}},
            # {"_id": 4, "Shop Name": "Shwe Lu Lu", "food": {"Shan Noodle-1500", "fired rice-2500", "Tongyang soup-2000"},
            #  "drink": {"lemon juice =2000", "Lemon tea =800"}},
            # {"_id": 5, "Shop Name": "Pyae phyo", "food": {'Kimar plata-2500', 'Irak kwe-300'},
            #  "drink": {"Silong Tea-1000", "Coffee-500"}},

        ]

        data_2 = [
            {'_id': 1, 'User_Name': 'Khant Ko Ko', 'Phone': '959123456789', 'Password': 'khant123',
             },
            {'_id': 2, 'User_Name': 'SiThu', 'Phone': '959532145671', 'Password': 'SiThu123',
             },
            {'_id': 3, 'User_Name': 'Aung Kaung Sett', 'Phone': '959556677889', 'Password': 'Aung123',
             },
            {'_id': 4, 'User_Name': 'Tha Zin Naing', 'Phone': '959987654321', 'Password': 'Thazin345',
             },

        ]
        data_3 = [
            {'_id': 1, 'Ph_Number': '959123451234', 'Address': 'YanGon DanGon Seikken', 'Order_History': ['jgdjd'],
             'Amount': 30000}
        ]
        # try:
        #     # self.collection.insert_many(data)
        #     self.collection_2.insert_many(data_2)
        #     print("insert successful")
        # except Exception as error:
        #     print(error)

    def checkMenu(self, revData):
        find = self.collection.find().distinct('Menu')
        for checkdata in find:
            print(checkdata)
            if checkdata == revData:
                return True
        return False

    def showmenu(self):

        find = self.collection.find({}, {'Menu': 1, '_id': 0})

        menu_str = '\n'.join(map(str, find))
        t = '$Enter choice Menu : '
        menu_str += t
        return menu_str

    def showmenu_test(self, menu):
        list_menu = []
        find = self.collection.find().distinct('Menu')
        for f_Menu in find:
            if f_Menu == menu:
                menu_shop = {"Menu": menu}
                find_shop = self.collection.find_one(menu_shop)

                find2 = find_shop.get('Shop Name')
                for i in find2:
                    menu_food = {'Shop Name': i}
                    find_1 = self.collection_1.find_one(menu_food)
                    find_3 = find_1.get('food')
                    find_4 = find_1.get('drink')

                    list_menu.append(i)

                    list_menu.append(find_3)
                    list_menu.append(find_4)
                    list_shop.append(i)
        print('listshop', list_shop)
        menu_str = '\n'.join(map(str, list_menu))
        order = "$Press 1:Add To cert\nPress 2:Remove from cert\nPress 3:Order Confirm\nPress 4:Back To option\nEnter " \
                "Choose:"
        menu_str += order
        return menu_str

    def order(self):

        # menu_str = '\n'.join(map(str, list_menu))

        order = "You Can order Now!$item :$Number of item :$Shop Name :"
        # menu_str += order
        return order

    def toCheckMenu(self, split_item):

        for i in list_shop:
            print(i)
            if i == split_item[2]:

                menu_food = {'Shop Name': i}
                find_1 = self.collection_1.find_one(menu_food)
                find_3 = find_1.get('food')
                find_4 = find_1.get('drink')

                for food in find_3:
                    if food == split_item[0]:
                        print('Food', food)
                        list_shop.clear()
                        return food
                for drink in find_4:
                    if drink == split_item[0]:
                        list_shop.clear()

                        print('drink', drink)
                        return drink

        list_shop.clear()
        print(list_shop)

        print('None')
        return False

    def add_cert(self, order):

        list_cert.append(order)
        return list_cert

    def remove(self, Data):
        # list_shop = ['sand$3$tea', 'pain$5$panEi', 'tea$3$TeaPro']
        splitData = Data.split('$')
        list_1 = []
        list_2 = ['h']

        for data_list in list_shop:
            split_data1 = data_list.split('$')

            for data in split_data1:

                if data == splitData[0]:
                    del list_2[0]
                    list_2.append(data)

                elif data == splitData[1]:
                    list_2.append(list_1[-1])
                    list_2.append(data)
                    l_str = '$'.join(map(str, list_2))
                    list_shop.remove(l_str)
                    return True
                else:
                    list_1.append(data)

        return False

    def show_Order(self):

        list_menu = []
        list_bill = []
        list_Total = []
        deliverFeed = 3000

        for data_list in list_cert:
            split_data1 = data_list.split('$')
            # print('ss',split_data1)
            list_menu.clear()
            for data in split_data1:
                # print('up')
                list_menu.append(data)
                # print(lidt)
                for d in list_shop:
                    # print('Test')
                    if d == list_menu[-1]:
                        # print(d)

                        menu_food = {'Shop Name': d}
                        find_1 = self.collection_1.find_one(menu_food)

                        find_3 = find_1.get('food')
                        # print(find_3)
                        # print(find_3)
                        price_food = find_3.get(list_menu[0])
                        # print(type(price_food))

                        find_4 = find_1.get('drink')
                        price_drink = find_4.get(list_menu[0])

                        # print(type(find_4))
                        for food in find_3:
                            if food == list_menu[0]:
                                # print('Food', food)
                                int_ = int(list_menu[1])
                                Total = price_food * int_
                                # print(Total)
                                food += ' ' + str(price_food) + '*' + list_menu[1] + '=' + str(Total) + 'ks'
                                print(food)
                                list_Total.append(Total)
                                list_bill.append(food)

                        for drink in find_4:
                            if drink == list_menu[0]:
                                int_ = int(list_menu[1])
                                Total_drink = price_drink * int_
                                # print(Total)
                                drink += ' ' + str(price_drink) + '*' + list_menu[1] + '=' + str(Total_drink) + 'ks'
                                print(drink)
                                list_Total.append(Total_drink)
                                list_bill.append(drink)

        Sum = sum(list_Total)
        words_string = 'Total amount  = '
        words_string += str(Sum)
        deli = 'Delivery Feed = ' + str(deliverFeed)
        deli_Sum = Sum + deliverFeed

        list_bill.append(words_string)

        bill_str = '\n'.join(map(str, list_bill))
        return bill_str

    def order_print(self):
        order = 'Press 1:Confirm\nPress 2:cancel$Enter choose'
        return order

    def order_comfirm(self):
        showOrder = self.show_Order()
        print(showOrder)
        print(type(showOrder))
        confirmKey = '$Are you sure confirm:Yes or No'
        showOrder += confirmKey
        return showOrder

    def ForYes(self):
        yesOption = 'Thanks Customer\nPlease Fill some information for Delivery$Enter Ph_Number :$Enter Address$Press ' \
                    '1 :PrePaid\nPress 2:Cash on Deli\nEnter choose For PayMent Method:'
        return yesOption

    def time_(self):

        named_tuple = time.localtime()  # get struct_time
        time_string = time.strftime("%m/%d/%Y %B, %I:%M:%S%p", named_tuple)

        print(time_string)
        return time_string

    def add_History(self, order_view, userinfo):

        time_str = self.time_()
        sign_in_ph_Data = self.check_Phnumber(list_signin[0])
        # userinfo[-1] += order_view + '10000'
        copy_order = order_view
        split = copy_order.split('Total amount  =')
        int_amount = int(split[1])
        history_str = 'Ph-No:959' + userinfo[0] + '\n' + order_view + '\n' + time_str
        print(history_str)
        # order_view += '\n' + time_str
        # print('time', order_view)
        if not sign_in_ph_Data:
            ph_Data = self.check_Phnumber(userinfo[0])

            userinfo.append(history_str)
            userinfo.append(int_amount)
            print(userinfo)
            print(ph_Data)
            var = '959'
            data = var + userinfo[0]
            userinfo[0] = data
            print(userinfo[0])

            if not ph_Data:
                print('one')
                self.historyAddForNoAccount(userinfo)
            else:
                print('Two')
                self.historyForAccountUser(history_str, userinfo[0], int_amount)
        else:
            pass

    def historyAddForNoAccount(self, userinfo):
        history = self.client['Delivery_database']['Order-History']
        count = history.count_documents({}) + 1

        userinfo.insert(0, count)
        list2 = ['_id', 'Ph_Number', 'Address', 'Order_History', 'Amount']
        d1 = zip(list2, userinfo)
        dic_data = dict(d1)
        print(dic_data)

        print(dic_data)

        self.collection_3.insert_one(dic_data)
        print("insert successful")

    def historyForAccountUser(self, history_str, user_ph, amount):

        ph = {"Phone": user_ph}
        find = self.collection_2.find_one(ph)
        g = find.get('_id')

        self.collection_2.update_one({'_id': g}, {'$push': {"Order_History": history_str}})
        self.collection_2.update_one({'_id': g}, {'$push': {"'Amount": amount}})

    def check_Phnumber(self, receive_data):
        find_ph = self.collection_2.find().distinct('Phone')

        key = '959'
        add_key = key + receive_data
        print(add_key)
        for data in find_ph:
            if data == add_key:
                return data
            else:
                pass
        return False

    def checking_password(self, phFromserver, passFromServer):
        ph = {"Phone": phFromserver}
        find = self.collection_2.find_one(ph)
        pass_1 = find.get('Password')

        if pass_1 == passFromServer:
            print('True')
            return True
        else:
            print('false')
            return False

    def addData(self, add_list_data):

        order = self.client['Delivery_database']['user-collection']
        count = order.count_documents({}) + 1
        print(count)
        var = '959'
        data = var + add_list_data[1]
        add_list_data[1] = data

        add_list_data.insert(0, count)
        list2 = ['_id', 'User_Name', 'Phone', 'Password']
        d1 = zip(list2, add_list_data)
        dic_data = dict(d1)
        print(dic_data)
        self.collection_2.insert_one(dic_data)
        print("insert successful")

    def ph_count_checking(self, int_Data):

        count = len(str(int_Data))
        if count == 9:
            return True
        else:
            return False

    def check_comfirm_password(self, list_data):

        if list_data[-2] == list_data[-1]:
            return True
        else:
            return False

    def sign_up_account(self):

        user = "This is Register State$Enter UserName:$Enter Ph_Number:$Enter Password:$Enter Confirm password:"

        return user

    def sign_in_account(self):

        client = "This is LoginState$Enter Ph_Number$Enter Password:"
        return client

    def user_account(self, userPh):
        del list_signin[0]
        list_signin.append(userPh)
        print(list_signin)
        account = "Login Success$Press 1:Menu\nPress 2:Back To option:\nPress 3 setting"
        return account

    def for_send_option(self):
        option = "press 1 : show menu\npress 2 : create account\npress 3 : Sign in account\nEnter option : "
        return option

    def removeCert(self):
        remove_option = "----$Enter Remove item:$Enter shopName:"
        return remove_option


if __name__ == "__main__":
    obj = mongodatabase()
    # obj.showmenu_test('Chicken')
    # data =['Tea','3','PanEi']
    # obj.toCheckMenu(data)
    # obj.remove('pain$panEi')
    # obj.checkMenu('Chicken')
    user_info = ['123345671', 'Yangon']
    obj.add_History('BurGer =100 Total amount  =1000'
                    , user_info)
    obj.time_()
